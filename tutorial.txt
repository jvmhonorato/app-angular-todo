. instalar novo projeto:  ng new <nome do projeto>

. apagar arquivos de excesso

.Em app.component.ts em @Component add template: `<router-outlet></router-outlet>`

. criar em src dist/scss variable.scss


MODULOS
. criar : ng g m /modules/home

. criar tambem:  ng g c /modules/home/components/header

. criar: ng g c /modules/home/components/toDoButtonDeleteAll

. criar: ng g c /modules/home/components/toDoAddItens

. criar :ng g c /modules/home/components/toDoList

. criar : ng g c /modules/home/pages/home

MAIN ROUTE

.EM app-routing-module.ts passar HomeComponent em Routes

. Passar o seletores dos components em HTML para  Pages, no caso em pages/home.component.HTML na ordem de contrução da aplicação ex: <header></header>
<content></content> <footer></footer>


.DECLARAR e IMPORTAR  o HomeModule no import em main app.module.ts

. Em dist variable.scss criar as variáveis de ambiente

. Em styles.scss importar as variaveis de ambiente e as  fontes do google fonts

.Envolver o component home.component.html em uma section e aplicar uma classe container pra configurar o layout

.sub componentizar o component add e delete em to-do-list.component.html

. E m to-do-list.component.html add campos ul, li, input e configuraro css2

. add scss no component de input e delete

START CREATE LOGIC

.Criar uma interface pra padronizar a tipagem dos objetos: ng g interface /modules/home/model/TaskList

importar interface aplicar no component TS desejado.

. Em home.module.ts importar o FormModule pra o NgModel funcionar quando chamar o public TaskList

. aplicar o ngModel no <input> chamando item.checked que é o valor boleano pra toda vez que o campo checked for marcado o valor boleano mudar de true pra false

. aplicar o ngModel no <input> chamando item.text pra quando digitar aparecer o que foi digitado.


.aplicar o ngclass na <section>  chamando o 'loading' que é uma class scss com o background uma img pra aparecer condicionalmente caso não esteja chegando dados na tela.


DELETE

.aplicar o ngIf no <app-to-do-button-delete> pra caso não esteja chegando dados ele não renderizar o button na tela


.criar em to-do-list.componet.ts criar o metodo deleteTaskItem() e deleteAllTaskItem()

. no html aplicar no o evento (click) com seus respectivos metodos

CREATE

.Em to-do-add-itens.ts  criar metodo @Output() public emmitItemTaskList = new EventEmitter();

.criar um metodo vazio: public addItemTaskList: string = "";

.Criar tambem metodo:public submitItemTaskList(){
    console.log(this.addItemTaskList);

  }

.Em to-do-add-itens.html usar o ngModel no input chamando o metod addItemTaskList  pra absorver os dados digitados

.em to-do-add-itens.html tambem no <input> acrecentar o evento (keyup.enter)="submitItemTaskList()" pra setar os dados com a tecla 'Enter'

.Em to-do-list.component.ts passar metodo: setEmitTaskList(event: string)
{this.taskList.push({task: event, checked: false});},

.Em to-do-list.component.html passar: (emmitItemTaskList)="setEmitTaskList($event)

PRA NÃO ADICIONAR VAZIO:

.Em to-do-add-itens.component.ts add no submitItemTaskList()   o trim() pra nãp adicioanr  espaços vazios e criar condicional pra nãp add valores nullos

.add [ngClass]="{'checked': item.checked}" no input text pra caso esteja marcado aplica a clase scss que sublinha


.Em to-do-list.component.ts pra mover is items checados pra baixo na lista: criar um ciclo de vida ngCheck

















